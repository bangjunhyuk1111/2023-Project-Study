NaN: Not a Number
--> typeof NaN: number
--> 연산에 NaN을 사용하면 결과는 NaN
ex) 200 + 0/0 = NaN(0/0 은 NaN)

**: 제곱기호

let year = 1985;
year 라는 병에 1985라는 내용이 들어있다.

num++는 나중에 갱신된다.
ex) let num = 5;
     let result = num++
   --> 5로 먼저 반환되고
     result
    --> 6으로 갱신

++num은 1을 먼저 더해주고 반환한다.

const로 한번 지정된 값은 변경할 수 없다.
그런데 왜 쓰는거냐?? 바뀌지 않는 변동률 같은 값을 쓸때 쓴다.
ex) 수학 계산식의 상수

변수를 설정할때는 숫자로 시작하지말자.
변수를 설정할때는 시작은 소문자 단어간의 연결에는 대문자로 구분해준다.
변수의 시작은 is


스트링을 저장할떈 " " or ' ' 무엇을 쓰든 일관성 있게
ex) let username = "danny"
여기서 username[0]은 d
         username[4]은 y
         username.length는 5 (총 문자수를 알 수 있다. 인덱스와는 다르다. 인덱스는 0 부터 센다. 요소번호와 같음. )

**집합의 개념**
let firstname = "River";
let lastname = "Lane";
--> firstname + lastname = RiverLane
    firstname + " " + lastname = River Lane


typeof (...)
--> ...의 타입을 알 수 있다.

username.indexOf('da');
--> username에서 da는 0번인덱스에서 시작되니까 결과는 0이 된다.


***slice란??**
"haha that is so funny!".slice(5)
'that is so funny!'

"haha that is so funny!".slice(5, 9)
'that'

let mes = "haha that is so funny!"
mes.slice(5, 9)
'that'



***replace란???***
let mes = "haha that is so funny!"

mes.replace('haha', 'lololol')
-->lololol that is so funny!

참고 replaceAll

***repeat***
mes.repeat(2)
'haha that is so funny!haha that is so funny!'


***문자열과 숫자를 합치면 이상한결과***
let year = "1998"; //숫자아님 문자임" " 사용했기때문
year + 1;
--> 19981


***toUpperCase() 와 toLowerCase() ***

mes.toUpperCase() 라고 한다면 mes가 모두 대문자로 바뀐다.
투 로월 케이스는 반대로 소문자로 바뀐다.


***tirm()***
~~~.trim() 을 하면 앞뒤의 공백을 삭제해준다.


여러개 연결 가능
ex)mes.toUpperCase().trim()
