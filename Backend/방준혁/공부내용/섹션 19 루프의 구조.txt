섹션 19: 루프의 구조

For 루프 **********************************
 for(let i = 1; i <= 10; i++){
    console.log(i);
}


배열 루프 ***********************************
const animals = ['lions', 'tigers', 'bears' ];

for(let i = 0; i < animals.length; i++){
       console.log(i, animals[i])
}
//여기서 animals.length는 배열에 들어있는 요소의 개수이다.
결과는??==>
0 라이언
1 타이거
2 베어

중첩 For **************************************

for문 안에 for문
const seatingChart = [
   [ 1 2 3 ],
   [ 4 5 6 ],
   [ 7 8 9]
]

for(let i = 0; i < seatingChart.length; i++){
      const row = seatingChart[i];
    for(let k = 0; k < row.length; k++){
          console.log(row[k])
   }
}
  

while 루프************************************

while( 이 안에 문장이 참이면 계속 반복 ) {

}
    
정지 / break **********************************

반복문의 조건이 참이더라도 반복문안에 break조건이 만족된다면 반복문은 중단

for( let i = 0; i < 1000; i++ ){
        console.log(i);
        if( i === 100 ){
  break;
   }
}

결과는???==>
0 ~ 100 까지만 출력된다.


for of *************************************

for(let i = 0; i < seatingChart.length; i++){
      const row = seatingChart[i];
    for(let k = 0; k < row.length; k++){
          console.log(row[k])
   }
}

for(let row of seatingChart) {
    for(let stuName of row){
   }
}

위의 두 반복문의 출력 결과는 같다.

배열을 반복문에서 사용할때 인덱스를 사용하지 않는다는 점에서 깔끔하다.

일반적으로 배열과 많이 사용되지만, 일반 문자열의 문자 하나하나를 출력할때도 사용한다.


객체 루프 for in ****************************

const testScore = {
a: 1,
b: 2,
c: 3
}

for(let person in testScore){
        console.log( '${person}' );
}
결과는?? ==>
a
b
c
key에 해당되는 부분만 나온다
섹션 18에서 배운 부분을 응용하면

for(let person in testScore) {
       console.log( '${person} score ${testScore[person]}
}

결과는??? ===>
a score 1
b score 2
c score 3

Object. keys/values/entries(testScore) ******
keys는 서랍장 열쇠를 배열로
values는 결과를 배열로
entries는 열쇠와 결과를 중첩한 배열

반복 할 일이있으면 배열로 바꾸기
for of 구문으로 사용도 가능
